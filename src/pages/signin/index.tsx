import { useState } from "react";
import { GetServerSidePropsContext, GetServerSidePropsResult } from "next";
import Head from "next/head";
import { useFormik } from "formik";
import { object, string } from "yup";
import { parse } from "cookie";
import { ParsedUrlQuery } from "querystring";

import { useAuth } from "@/context/auth";

import {
  Box,
  Button,
  CircularProgress,
  CssBaseline,
  Divider,
  FormControl,
  FormHelperText,
  IconButton,
  InputAdornment,
  InputLabel,
  OutlinedInput,
  TextField,
  Typography,
} from "@mui/material";
import LoginIcon from "@mui/icons-material/Login";
import VisibilityIcon from "@mui/icons-material/Visibility";
import VisibilityOffIcon from "@mui/icons-material/VisibilityOff";

import AppBar from "@/components/AppBar";

// import { LoginForm } from "@/components/LoginForm";

const validationSchema = object().shape({
  email: string().email().required(),
  password: string().required(),
});

interface Props {
  token: string;
}

export const getServerSideProps = async (
  context: GetServerSidePropsContext<ParsedUrlQuery>
): Promise<GetServerSidePropsResult<Props>> => {
  const { req } = context;

  const cookies = parse(req?.headers?.cookie || "");
  const token = cookies?.token || "";

  return {
    props: {
      token,
    },
  };
};

export default function LoginPage() {
  const [showPassword, setShowPassword] = useState(false);

  const { signIn } = useAuth();

  const handleSignIn = async (values: any) => {
    signIn(values);
  };

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validationSchema,
    onSubmit: handleSignIn,
  });

  const handleClickShowPassword = () => setShowPassword((show) => !show);

  const handleMouseDownPassword = (
    event: React.MouseEvent<HTMLButtonElement>
  ) => {
    event.preventDefault();
  };

  return (
    <>
      <Head>
        <title>Login | Tânia Bulhões</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <CssBaseline />

      <Box
        sx={{ display: "flex", flexDirection: "column", minHeight: "100vh" }}
      >
        <AppBar title="Login" />
        <Box
          sx={{
            display: "flex",
            flexDirection: "column",
            flexGrow: 1,
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          <form onSubmit={formik.handleSubmit}>
            <Box
              sx={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <Typography
                variant="h5"
                noWrap
                component="div"
                sx={{ marginBottom: 3 }}
              >
                Entre em sua conta
              </Typography>

              <Box
                sx={{
                  mb: 1,
                  minHeight: 80,
                  width: "100%",
                  maxWidth: "320px",
                }}
              >
                <TextField
                  fullWidth
                  id="email"
                  name="email"
                  label="Email"
                  value={formik.values.email}
                  onChange={formik.handleChange}
                  error={formik.touched.email && Boolean(formik.errors.email)}
                  helperText={formik.touched.email && formik.errors.email}
                  variant="outlined"
                />
              </Box>

              <Box
                sx={{
                  mb: 1,
                  minHeight: 80,
                  width: "100%",
                  maxWidth: "320px",
                }}
              >
                <FormControl
                  variant="outlined"
                  sx={{ width: "100%", maxWidth: "320px" }}
                >
                  <InputLabel
                    htmlFor="password"
                    error={
                      formik.touched.password && Boolean(formik.errors.password)
                    }
                  >
                    Senha
                  </InputLabel>

                  <OutlinedInput
                    fullWidth
                    id="password"
                    name="password"
                    label="Senha"
                    type={showPassword ? "text" : "password"}
                    value={formik.values.password}
                    onChange={formik.handleChange}
                    error={
                      formik.touched.password && Boolean(formik.errors.password)
                    }
                    endAdornment={
                      <InputAdornment position="end">
                        <IconButton
                          aria-label="toggle password visibility"
                          onClick={handleClickShowPassword}
                          onMouseDown={handleMouseDownPassword}
                          edge="end"
                        >
                          {showPassword ? (
                            <VisibilityOffIcon />
                          ) : (
                            <VisibilityIcon />
                          )}
                        </IconButton>
                      </InputAdornment>
                    }
                  />
                  {formik.touched.password &&
                    Boolean(formik.errors.password) && (
                      <FormHelperText id="component-error-text" error>
                        {formik.errors.password}
                      </FormHelperText>
                    )}
                </FormControl>
              </Box>

              <Box>
                <Button
                  variant="contained"
                  color="primary"
                  type="submit"
                  size="large"
                  startIcon={
                    formik.isSubmitting ? (
                      <CircularProgress size={20} />
                    ) : (
                      <LoginIcon />
                    )
                  }
                  disabled={formik.isSubmitting}
                >
                  Entrar
                </Button>
              </Box>
            </Box>
          </form>

          <Divider sx={{ marginTop: 4, width: "200px" }}>ou</Divider>

          <Box sx={{ marginTop: 4 }}>
            <Button
              variant="outlined"
              color="primary"
              type="submit"
              size="large"
              href="/signup"
            >
              Criar uma conta
            </Button>
          </Box>
        </Box>
      </Box>
    </>
  );
}
