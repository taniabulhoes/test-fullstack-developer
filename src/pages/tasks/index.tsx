import { useEffect } from "react";
import { GetServerSidePropsContext, GetServerSidePropsResult } from "next";
import { ParsedUrlQuery } from "querystring";
import { useRouter } from "next/router";
import Head from "next/head";
import { parse } from "cookie";

import {
  Box,
  Checkbox,
  Container,
  CssBaseline,
  Divider,
  Fab,
  IconButton,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
} from "@mui/material";
import AddIcon from "@mui/icons-material/Add";
import BorderColorIcon from "@mui/icons-material/BorderColor";
import DeleteOutlineIcon from "@mui/icons-material/DeleteOutline";

import { useAuth } from "@/context/auth";
import { useTasks } from "@/context/tasks";
import AppBar from "@/components/AppBar";
import { ITask } from "@/types/tasks";

interface Props {
  token: string;
}

export const getServerSideProps = async (
  context: GetServerSidePropsContext<ParsedUrlQuery>
): Promise<GetServerSidePropsResult<Props>> => {
  const { req } = context;

  const cookies = parse(req?.headers?.cookie || "");
  const token = cookies?.token || "";

  if (!token) {
    return {
      redirect: {
        destination: "/signin",
        permanent: false,
      },
    };
  }

  return {
    props: {
      token,
    },
  };
};

export default function TasksPage({ token }: Props) {
  const router = useRouter();
  const { deleteTask, getTasks, searchedTaskTitle, tasks, updateTask } =
    useTasks();

  const { user } = useAuth();

  const tasksToDisplay = searchedTaskTitle
    ? tasks.filter((task) =>
        task.title.toLowerCase().includes(searchedTaskTitle.toLowerCase())
      )
    : tasks;

  useEffect(() => {
    getTasks();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [token]);

  const handleDeleteTask = (id: string) => {
    deleteTask(id);
  };

  const handleUpdateTask = (event: any, id: string) => {
    event.stopPropagation();

    router.push(`/tasks/${id}`);
  };

  const handleToggleCompleted = ({ completed, id }: Omit<ITask, "title">) => {
    updateTask({ completed: !completed, id });
  };

  return (
    <>
      <Head>
        {user?.name ? (
          <title>Tarefas | {user?.name} | T창nia Bulh천es</title>
        ) : (
          <title>Tarefas | T창nia Bulh천es</title>
        )}
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <CssBaseline />

      <Box>
        <AppBar
          title={user?.name ? `Tarefas | ${user?.name}` : "Tarefas"}
          user={user}
        />

        <Container maxWidth="md">
          {tasksToDisplay?.map((task: ITask) => (
            <Box key={task.id}>
              <ListItem
                key={1}
                secondaryAction={
                  <Box sx={{ display: "flex", gap: "12px" }}>
                    <IconButton
                      edge="end"
                      aria-label="comments"
                      onClick={(event) => handleUpdateTask(event, task.id)}
                    >
                      <BorderColorIcon />
                    </IconButton>

                    <IconButton
                      edge="end"
                      aria-label="delete"
                      onClick={() => handleDeleteTask(task.id)}
                    >
                      <DeleteOutlineIcon />
                    </IconButton>
                  </Box>
                }
                disablePadding
                onClick={() => handleToggleCompleted(task)}
              >
                <ListItemButton role={undefined} onClick={() => {}}>
                  <ListItemIcon>
                    <Checkbox
                      edge="start"
                      checked={task.completed}
                      tabIndex={-1}
                      disableRipple
                    />
                  </ListItemIcon>
                  <ListItemText id={"id"} primary={task.title} />
                </ListItemButton>
              </ListItem>
              <Divider />
            </Box>
          ))}
        </Container>

        <Box sx={{ position: "fixed", bottom: 12, right: 12 }}>
          <Fab color="primary" aria-label="add" href="/tasks/create">
            <AddIcon />
          </Fab>
        </Box>
      </Box>
    </>
  );
}
